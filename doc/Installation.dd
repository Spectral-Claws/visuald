Ddoc

$(P Visual D works with all Visual Studio versions from 2008 to 2022. Please make sure to
have the $(B C++ development tools) aswell as a $(B Windows SDK) included in the Visual Studio installation.)

$(P The click-through-installer will guide you through the installation process. The installer lets you select the
Visual Studio Version for which you want Visual D to be installed. It will always install
for all users, not only for a single user.)

$(P To compile your application, you must have $(LINK2 http://www.digitalmars.com/d/download.html, DMD),
$(LINK2 https://github.com/ldc-developers/ldc, LDC) or $(LINK2 https://github.com/D-Programming-GDC/GDC, GDC)
installed.)

$(H2 Using DMD)

$(P DMD is a the reference D compiler. It has the latest features of D implemented first, and
usually provides the fastest compilation times for debug builds.)

$(P Not all functionality of Visual D has been adopted to GDC and LDC, so having DMD available is recommended.)
It is also used as the default in most options, e.g. when creating new projects.

$(P You can change the DMD installation path at the global
Tools->Options->Projects and Solutions->Visual D Settings->DMD Directories
option page.)

$(H2 Using LDC)

$(P LDC is a D compiler using the LLVM backend. It can produce more efficient code than DMD.
The latest releases can be found at $(LINK https://github.com/ldc-developers/ldc/releases/).
You should install the "multilib" version.)

$(P Enter the LDC installation path at the global Tools->Options->Projects and Solutions->Visual D Settings->LDC Directories
option page. Then switch the "Compiler" option in the project configuration to "LDC".)

$(H2 Using GDC)

$(P GDC is a D compiler using the GNU compiler suite backend. It can produce more efficient code than DMD.)

$(B As there is currently no uptodate build of GDC available for Windows, support for it has
fallen behind and is untested. With GDC being included with the GCC compiler suite in May 2019, this might change in the
near future.)

$(P You can find a rather dated build at $(LINK http://gdcproject.org/downloads). Please also install the respective
MinGW environment.)

$(P Enter the GDC installation path at the global Tools->Options->Projects and Solutions->Visual D Settings->GDC Directories
option page. Then switch the "Compiler" option in the project configuration to "GDC".)

$(P Known issues:)
$(UL
  $(LI when building a library you should change the output file name extension to ".a".)
  $(LI when building a library object files will be generated into the project directory, not the
    intermediate directory, because there seems to be no GDC option to change the output folder for multiple files.)
  $(LI as there are no recent GDC releases for Windows, support for it has fallen short. Please don't expect
    completeness.)
  $(LI GDC is not supported by the VC project integration.)
)

$(H2 Visual Studio 2008 - 2012)

Visual D supports these versions, but is no longer being tested on these.

$(P Visual D does $(B not) work with any of the $(B Express) versions of Visual Studio. Other than the
commercial editions, the Express versions do not support loading third party extensions and add-ins.)

$(H3 Visual Studio Shell)

$(P A $(B free) alternative to the commercial releases are the integrated $(B Visual Studio Shell) distributions, that can be downloaded
from Microsoft (see below for links). The shells are identical with the Visual Studio IDE, but stripped of any language support. It
still contains the native debugger that can be used to debug D applications.)

$(P VS Shell 2008 can be found
$(LINK2 http://www.microsoft.com/downloads/details.aspx?FamilyID=40646580-97FA-4698-B65F-620D4B4B1ED7&displaylang=en, here),
though a newer version is recommended. Some functionality is not supported in VS2008.)

$(P VS Shell 2010 can be used, but there don't seem to be any installers available from Microsoft anymore.)

$(P Unfortunately, the Visual Studio Shells 2008 and 2010 are missing one file that is needed for
the conversion of the debug information by cv2pdb. This is $(B msobj80.dll) for VS2008 and $(B msobj100.dll) for VS2010
and must be extracted from a standard installation, the Visual C Express edition or the Windows SDK.
You might also find it installed by other Microsoft products.
Put this file alongside mspdbcore.dll, normally in $(LESS)VS-installation-path$(GREATER)\Common7\IDE.)

$(P The $(B Visual Studio Shell 2012) is installed with two packages, the
$(LINK2 http://www.microsoft.com/en-us/download/details.aspx?id=30671, isolated shell) followed by the
$(LINK2 http://www.microsoft.com/en-us/download/details.aspx?id=30663, integrated package). Fortunately it
has all the files needed for debugging, and the Visual D installer patches the installation to
make the x64 debugger work.)

$(P The $(B Visual Studio Shell 2013) is installed similar to VS Shell 2012, the
$(LINK2 http://www.microsoft.com/en-us/download/details.aspx?id=40764, isolated shell) and the
$(LINK2 http://www.microsoft.com/en-us/download/details.aspx?id=40777, integrated package).)

Macros:
	TITLE=Installation
